[
  {
    "objectID": "my_trabajo_BigData.html",
    "href": "my_trabajo_BigData.html",
    "title": "VIVIENDA EN ESPAÑA",
    "section": "",
    "text": "Introducción\nEl objetivo de este trabajo es analizar la situación en la que se encuentran los jóvenes a la hora de acceder al mercado laboral. Para ello analizaremos diferentes métricas entre las que se encuentran: Evolución de los niveles de precios de la vivienda a nivel nacional y autonómico, comparación de esta con la de los salarios reales…\nDe esta manera constataremos las dificultades a alas que se enfrentan los jóvenes españoles para emanciparse. También extraeremos conclusiones sobre si es así en todo el país o si por el contrario hay diferencias según el área geográfica.\nDatos del trabajo\n\n\nDatos\nCódigo\n\n\n\nVamos a utilizar datos de los paquetes pxR (ine), eurostat además de proveedores de datos externos.\n\n\n\nCódigo#Paquetes Preliminares\nlibrary(pxR)\nlibrary(tidyverse)\nlibrary(data.table)\nlibrary(rlist)\nlibrary(fs)\nlibrary(curl)\nlibrary(rio)\nlibrary(readxl)\nlibrary(downloader)\nlibrary(writexl)\n\n#-------------------Creamos una carpeta para guardar los datos------------------\n\ndir_create(\"./docs/datos\")\n\n#Descargamos los datos y los exportamos sin pulir: \n\n#---------------------Índice de Precios de Vivienda-----------------------------\n\nurl &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/25171.px?nocab=1\"\naa &lt;- read.px(url)\n\n#Lo convertimos a CSV para simplificar y creamos un dataframe\n\nwrite.csv(aa, file = \"data.csv\", sep = \",\")\nIPV &lt;- read.csv(\"data.csv\")\nrm(list = ls()[!ls() %in% c(\"IPV\")])\n\n#Los guardamos sin arreglar\nwrite.csv(IPV,  file = \"./docs/datos/ipv.csv\")\n#-------------------------Compra-venta de vivienda------------------------------\n\nruta_xls &lt;- \"https://apps.fomento.gob.es/BoletinOnline2/sedal/34010110.XLS\"\n\ndownload.file(ruta_xls, \"datos.xls\", mode = \"wb\")\n\nnombres_hojas &lt;- c(\"2004,2005,2006,2007,2008\", \"2009,2010,2011,2012,2013\", \n                   \"2014,2015,2016,2017,2018\", \"2019,2020,2021,2022,2023\")\n# Leer todas las hojas en una lista\nfor (i in seq_along(nombres_hojas)) {\n  hoja &lt;- nombres_hojas[i]\n  df &lt;- readxl::read_excel(\"datos.xls\", sheet = i) \n  write.csv(df, file = paste0(hoja, \".csv\"), row.names = FALSE)}\n\n#Juntamos las cuatro sheets en una y después arreglaremos el desastre\ncompraventa_2004 &lt;- read.csv(\"2004,2005,2006,2007,2008.csv\")\ncompraventa_2009 &lt;- read.csv(\"2009,2010,2011,2012,2013.csv\")\ncompraventa_2014 &lt;- read.csv(\"2014,2015,2016,2017,2018.csv\")\ncompraventa_2019 &lt;- read.csv(\"2019,2020,2021,2022,2023.csv\")\n\ncv &lt;- bind_cols(compraventa_2009,compraventa_2014)\ncv &lt;- bind_cols(cv,compraventa_2019)\ncompraventa_2004 &lt;- compraventa_2004[1:nrow(cv), ]\ncv &lt;- bind_cols(cv,compraventa_2004)\n\n\ncv &lt;- cv %&gt;%\n  filter(row_number() %in% 6:72)\ncv &lt;- cv %&gt;%\n  filter(!row_number() %in% 2)\n\n#Los guardamos sin arreglar\nwrite.csv(cv,  file = \"./docs/datos/cv.csv\")\nrm(list = ls())\n\n\n#--------------------------Renta por edad y sexo--------------------------------\n\nurl3 &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/9942.px?nocab=1\"\naa &lt;- read.px(url3)\n\n#Lo convertimos a CSV para simplificar y creamos un dataframe\n\nwrite.csv(aa, file = \"data.csv\", sep = \",\")\nrenta_edad &lt;- read.csv(\"data.csv\")\n\n#Los guardamos sin arreglar\nwrite.csv(renta_edad, file = \"./docs/datos/renta_edad.csv\")\n\nrm(list = ls())\n#---------------------------Renta por nacionalidad------------------------------\n\nurl4 &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/9945.px?nocab=1\"\naa &lt;- read.px(url4)\n\n#Lo convertimos a CSV para simplificar y creamos un dataframe\n\nwrite.csv(aa, file = \"data.csv\", sep = \",\")\nrenta_nacionalidad &lt;- read.csv(\"data.csv\")\n\n#Los guardamos sin arreglar\nwrite.csv(renta_nacionalidad, file = \"./docs/datos/renta_nacionalidad.csv\")\n\nrm(list = ls())\n\n\n#---------------------Hogares por regimen de tenencia edad----------------------\n\nurl4 &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/9994.px?nocab=1\"\naa &lt;- read.px(url4)\n\n#Lo convertimos a CSV para simplificar y creamos un dataframe\n\nwrite.csv(aa, file = \"data.csv\", sep = \",\")\nvivienda_edad &lt;- read.csv(\"data.csv\")\n\n#Los guardamos sin arreglar\nwrite.csv(vivienda_edad, file = \"./docs/datos/vivienda_datos.csv\")\n\nrm(list = ls())\n\n#Borramos archivos como las sheets separadas y otros datos\nfile.remove(\"2004,2005,2006,2007,2008.csv\", \"2009,2010,2011,2012,2013.csv\",\n            \"2014,2015,2016,2017,2018.csv\", \"2019,2020,2021,2022,2023.csv\", \n            \"compraventa.csv\", \"data.csv\", \"datos.xls\", \"./docs/datos/25171.px\",\n            \"./docs/datos/34010110.XLS\")\n#&gt; [1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE  TRUE FALSE FALSE\n\n#----------------------Procedemos a limpiar los datos---------------------------\n\n#-------------Creamos una carpeta para guardar los datos pulidos----------------\n\ndir_create(\"./datos_pulidos\")\nlibrary(zoo)\n\n###AHORA LIMPIAMOS LOS DATOS PARA TRABAJAR MEJOR CON ELLOS###\n\n#-------------------Indice de precios de la Vivienda----------------------------\n\ncv &lt;- import(file = \"./docs/datos/cv.csv\")\n\n#Elimino las columnas duplicadas indicando el nombre de la provincia \n#para dejar solo una columna de provincias\n\ncv &lt;- cv[-1,]\ncolnames(cv) &lt;- NULL\ncolumnas_duplicadas &lt;- duplicated(t(cv))\nprint(columnas_duplicadas)\n#&gt;  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#&gt; [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n#&gt; [25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#&gt; [37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n#&gt; [49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#&gt; [61] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n#&gt; [73] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\ncv &lt;- cv[, !columnas_duplicadas]\ncolnames(cv) &lt;- paste0(\"col_\", 1:ncol(cv))\n#Elimino otra columnaa duplicadaa que el argumento no encuenrtra \n\ncv &lt;- cv[, -62]\n\n#Doy nombre a la posición [1,2] de provincias para después poder trabajar mejor\n#Ya que convertiremos la primera fila en colnames\n\ncv[1,2] &lt;- \"Provincia\"\ncolnames(cv)\n#&gt;  [1] \"col_1\"  \"col_2\"  \"col_3\"  \"col_4\"  \"col_5\"  \"col_6\"  \"col_7\"  \"col_8\" \n#&gt;  [9] \"col_9\"  \"col_10\" \"col_11\" \"col_12\" \"col_13\" \"col_14\" \"col_15\" \"col_16\"\n#&gt; [17] \"col_17\" \"col_18\" \"col_19\" \"col_20\" \"col_21\" \"col_22\" \"col_23\" \"col_24\"\n#&gt; [25] \"col_25\" \"col_26\" \"col_27\" \"col_28\" \"col_29\" \"col_30\" \"col_31\" \"col_32\"\n#&gt; [33] \"col_33\" \"col_34\" \"col_35\" \"col_36\" \"col_37\" \"col_38\" \"col_39\" \"col_40\"\n#&gt; [41] \"col_41\" \"col_42\" \"col_43\" \"col_44\" \"col_45\" \"col_46\" \"col_47\" \"col_48\"\n#&gt; [49] \"col_49\" \"col_50\" \"col_51\" \"col_52\" \"col_53\" \"col_54\" \"col_55\" \"col_56\"\n#&gt; [57] \"col_57\" \"col_58\" \"col_59\" \"col_60\" \"col_61\" \"col_63\" \"col_64\" \"col_65\"\n#&gt; [65] \"col_66\" \"col_67\" \"col_68\" \"col_69\" \"col_70\" \"col_71\" \"col_72\" \"col_73\"\n#&gt; [73] \"col_74\" \"col_75\" \"col_76\" \"col_77\" \"col_78\" \"col_79\" \"col_80\" \"col_81\"\n#&gt; [81] \"col_82\"\n\n#Seleccionamos la primera fila del df y lo convertimos en un vector. Después, \n#Hacemos que los NA se sustituyan por el texto de su izquierda (Remplazamos NA`s\n#por el año al que corresponde esa columnas)\n\ndf &lt;- cv %&gt;%\n  slice(1) %&gt;%\n  unlist()\n\ndf &lt;- na.locf(df)\n\n#Ahora convertimos el vector en la fila 1 que después convrtiremos en colnames\n#para trabajar mejor.\n\ncv[1,] &lt;- df \n\n#Juntamos la fila 1 y 2 a partir de la tercer columna separando el texto con \"_\" \n#y le rellenamos las dos columnas restantes con los nombres que nos vengan mejor \n#para trabajar\naa &lt;- cv[1,]\naa &lt;- c(\"\",\"Provincia\",paste(cv[1,3:ncol(cv)],cv[2,3:ncol(cv)], sep = \"_\"))\n\n#Convertimos el vector aa en colnames\n\ncolnames(cv) = aa\n\n#Quitamos la primera y la segunda fila, es información que ya indica colnames\n\ncv &lt;- cv[-(1:2), -(1)]\ncolnames(cv)\n#&gt;  [1] \"Provincia\"        \"Año 2009_1º\"      \"Año 2009_2º\"      \"Año 2009_3º\"     \n#&gt;  [5] \"Año 2009_4º\"      \"Año 2010_1º\"      \"Año 2010_2º\"      \"Año 2010_3º\"     \n#&gt;  [9] \"Año 2010_4º\"      \"Año 2011_1º\"      \"Año 2011_2º\"      \"Año 2011_3º\"     \n#&gt; [13] \"Año 2011_4º\"      \"Año 2012_1º\"      \"Año 2012_2º\"      \"Año 2012_3º\"     \n#&gt; [17] \"Año 2012_4º\"      \"Año 2013_1º\"      \"Año 2013_2º\"      \"Año 2013_3º\"     \n#&gt; [21] \"Año 2013_4º\"      \"Año 2014_1º\"      \"Año 2014_2º\"      \"Año 2014_3º\"     \n#&gt; [25] \"Año 2014_4º\"      \"Año 2015_1º\"      \"Año 2015_2º\"      \"Año 2015_3º\"     \n#&gt; [29] \"Año 2015_4º\"      \"Año 2016_1º\"      \"Año 2016_2º\"      \"Año 2016_3º\"     \n#&gt; [33] \"Año 2016_4º\"      \"Año 2017_1º\"      \"Año 2017_2º\"      \"Año 2017_3º\"     \n#&gt; [37] \"Año 2017_4º\"      \"Año 2018_1º\"      \"Año 2018_2º\"      \"Año 2018_3º\"     \n#&gt; [41] \"Año 2018_4º\"      \"Año 2019_1º\"      \"Año 2019_2º\"      \"Año 2019_3º\"     \n#&gt; [45] \"Año 2019_4º\"      \"Año 2020_1º\"      \"Año 2020_2º\"      \"Año 2020_3º\"     \n#&gt; [49] \"Año 2020_4º\"      \"Año 2021_1º\"      \"Año 2021_2º\"      \"Año 2021_3º\"     \n#&gt; [53] \"Año 2021_4º\"      \"Año 2022_1º\"      \"Año 2022_2º\"      \"Año 2022_3º\"     \n#&gt; [57] \"Año 2022_4º\"      \"Año 2023_1º\"      \"Año 2023_2º\"      \"Año 2023_3º (**)\"\n#&gt; [61] \"Año 2004_1º\"      \"Año 2004_2º\"      \"Año 2004_3º\"      \"Año 2004_4º\"     \n#&gt; [65] \"Año 2005_1º\"      \"Año 2005_2º\"      \"Año 2005_3º\"      \"Año 2005_4º\"     \n#&gt; [69] \"Año 2006_1º\"      \"Año 2006_2º\"      \"Año 2006_3º\"      \"Año 2006_4º\"     \n#&gt; [73] \"Año 2007_1º\"      \"Año 2007_2º\"      \"Año 2007_3º\"      \"Año 2007_4º\"     \n#&gt; [77] \"Año 2008_1º\"      \"Año 2008_2º\"      \"Año 2008_3º\"      \"Año 2008_4º\"\n\n#Hacemos que todas las columnas que indican año_trimestre pivoten y dejen los\n#valores que contenían las transacciones por un lado y el año_trimestre por otro\n\nTransacciones_por_provincia &lt;- cv %&gt;% pivot_longer(cols = starts_with(\"Año\"), \n                                                   names_to = \"Año_Trimestre\", \n                                                   names_prefix = \"Año\", \n                                                   values_to = \"Transacciones\",\n                                                   values_drop_na = TRUE)\n\n#Guardamos en la carpeta(en formato .csv) de datos pulidos y seguimos\n\nwrite.csv(Transacciones_por_provincia, \n          file = \"datos_pulidos/Transacciones_por_povincia.csv\")\n\n#----------------Índice de precios de la vivienda-------------------------------\n\n\nipv &lt;- import(file = \"./docs/datos/ipv.csv\")\n\n#Estos datos están bien, quitamos las dos columnas que no aportan y los guardamos\nipv &lt;- ipv[,-(1:2)]\n\nwrite.csv(ipv, file = \"./datos_pulidos/indice_precio_vivienda.csv\")\n\n#rm(list = ls())\n\n\n#----------------Renta por edad-------------------------------------------------\n\nre &lt;- import(file  = \"./docs/datos/renta_edad.csv\")\n\n#Renombramos las columnas, seleccionamos lo que nos interesa y borramos el restante\n#Exportamos\nre &lt;- re %&gt;%\n  rename(renta = \"value\") %&gt;%\n  select(!c(\"V1\", \"X\"))\n\nwrite.csv(re, file = \"./datos_pulidos/renta_por_edad.csv\")\n\n\n\n\n#----------------Régimen tenencia de vivienda por edad--------------------------\n\nvd &lt;- import(file  = \"./docs/datos/vivienda_datos.csv\")\n\n#Renombramos las columnas, seleccionamos lo que nos interesa y borramos el restante\n#Exportamos\nvd&lt;- vd %&gt;%\n  rename(Porcentaje = \"value\") %&gt;%\n  select(!c(\"V1\", \"X\"))\n\nwrite.csv(vd, file = \"./datos_pulidos/tenencia_de_vivienda.csv\")\nrm(list = ls())\n\n#--------------------IMPORTAR DATOS CE / EUROSTAT-------------------------------\noptions(scipen = 999) #- para quitar la notación científica\n\nlibrary(eurostat) \nlibrary(DT) \nlibrary(tidyverse)\n\ninfo &lt;- search_eurostat(\"GDP\", type = \"all\")\nmy_table &lt;-\"sdg_08_10\"\n\n#Comprobamos que es el PIB pc\nlabel_eurostat_tables(my_table)\n#&gt; [1] \"Real GDP per capita\"\n\ndf_original &lt;- get_eurostat(my_table, time_format = 'raw', keepFlags = TRUE)\ndf_names &lt;- names(df_original)\ndf_original &lt;- label_eurostat(df_original, code = df_names, fix_duplicated = TRUE)\n\n#Creamos otro df para trabajor con él \n\ndf &lt;- df_original\n\n#Ver que hay en el df\ndf_aa &lt;- pjpv.curso.R.2022::pjp_dicc(df)\ndf_bb &lt;- pjpv.curso.R.2022::pjp_valores_unicos(df, nn = 400)\n\n#Vamos a hacer un poco de limpieza\nobj_buenos &lt;- c(\"df\", \"df_original\", \"df_bb\")\nrm(list = setdiff(ls(), obj_buenos))\n\n#Vamos a seguir arreglando el df\n\ndf &lt;- df |&gt; \n  rename(year = time_code) |&gt; \n  rename(PIB_pc = values) |&gt; \n  rename(country = geo)\n\n#Chain linked volumes (2010), euro per capita\n#Solo queremos el PIB_pc\ndf &lt;- df |&gt; \n  filter(unit == \"Chain linked volumes (2010), euro per capita\")\n\n#Eliminamos todo lo que nos molesta a la vista \ndf &lt;- df |&gt; \n  select(-c(unit_code, values_code, unit, time, na_item_code, na_item, flags))\n\ndf &lt;- df |&gt;  mutate(year =  as.numeric(year))\n\ndf &lt;- df |&gt;  mutate(iso_2_code =  eurostat::harmonize_country_code(geo_code))\n\ndf &lt;- df |&gt; \n  select(-c(geo_code, flags_code))\n\n\nlibrary(fs)\ndir_create(\"datos_pulidos\")\n\n#A continuación vamos a exportar los datos para luego importarlas más fácilmente #library(rio)\n\nexport(df, \"./datos_pulidos/PIB_pc.csv\", type = \"csv\")\n#---------------DATOS SOBRE EL SALARIO POR NIVEL DE FORMACIÓN-------------------\n\nlibrary(rio)\nlibrary(tidyverse)\nurl &lt;- \"https://www.ine.es/jaxiT3/files/t/es/csv_bdsc/13931.csv?nocab=1\"\ndf_ine &lt;- import(url)\ndf_ine_01 &lt;- df_ine |&gt; \n  filter(Decil %in% (\"Total decil\")) |&gt; \n  select(\"Periodo\", \"Tipo de jornada\", \"NIVELES DE FORMACION\", \"Total\") |&gt; \n  rename(year = Periodo) |&gt; \n  rename(jornada = 'Tipo de jornada') |&gt; \n  rename(formacion = 'NIVELES DE FORMACION') |&gt;\n  rename(salario = Total)\n\n#VAMOS A CONVERTIR LA VARIABLE salario A NUMERIC\n\n#R y el INE me han jodiedo la vida para pasar esto a numeric (antes no funcionaba)\ndf_ine_01 &lt;- df_ine_01 |&gt; \n  mutate(salario = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", salario))))\n\nexport(df_ine_01,\"./datos_pulidos/salario_formacion.csv\", type = \"csv\")\n\n\n#-----------------------DATOS SOBRE EL SALARIO POR EDADES-----------------------\n\nurl_1 &lt;- \"https://www.ine.es/jaxiT3/files/t/es/csv_bdsc/13928.csv?nocab=1\"\ndf_ine_x1 &lt;- import(url_1)\n\ndf_ine_02 &lt;- df_ine_x1 |&gt; \n  filter(Decil %in% (\"Total decil\")) |&gt;\n  select(\"Periodo\", \"Tipo de jornada\", \"Grupo de edad\", \"Total\") |&gt; \n  rename(year = Periodo) |&gt; \n  rename(jornada = 'Tipo de jornada') |&gt; \n  rename(grupo_edad = 'Grupo de edad') |&gt;\n  rename(salario = Total)\n\n#PASAMOS A NUMERIC\ndf_ine_02 &lt;- df_ine_02 |&gt; \n  mutate(salario = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", salario))))\n\nexport(df_ine_02,\"./datos_pulidos/salario_grupo_edad.csv\", type = \"csv\")\n#------------------------------DATOS SOBRE EL IPC-------------------------------\n\nurl_2 &lt;- \"https://www.ine.es/jaxiT3/files/t/es/csv_bdsc/50908.csv?nocab=1\"\ndf_ipc &lt;- import(url_2)\n\ndf_ipc_01 &lt;- df_ipc |&gt; \n  filter(`Grupos ECOICOP` %in% c(\"Índice general\", \"04 Vivienda, agua, electricidad, gas y otros combustibles\")) |&gt; \n  select(\"Periodo\", \"Grupos ECOICOP\", \"Tipo de dato\", \"Total\") |&gt; \n  rename(year = Periodo) |&gt;\n  rename(grupo = 'Grupos ECOICOP') |&gt; \n  rename(tipo_dato = `Tipo de dato` ) \n\n#PASAMOS A NUMERIC\ndf_ipc_01 &lt;- df_ipc_01 |&gt; \n  mutate(Total = as.numeric(gsub(\",\", \".\", gsub(\"\\\\.\", \"\", Total))))\n\n#PARA SEPARAR EN LA VARIABLE YEAR LOS DATOS POR AÑOS Y MESES\n#df_sep &lt;- df_ipc_01 |&gt; \n#  separate(col = year, into = c(\"year\", \"month\"), sep = \"M\")\n\n#df_sep &lt;- df_sep |&gt; \n#  mutate(month = paste0(\"M\", month))\n\nexport(df_ipc_01, \"./datos_pulidos/IPC_mas_vivienda.csv\", type = \"csv\")\n\n\n\n\n\nEvolución de la renta neta por edad\nIniciaremos analizando los datos de renta según la edad (como pueden imaginar, los jóvenes constituyen el grupo poblacional que dispone de menos renta), para, a continuación, adentrarnos en datos que muestran la evolución de los precios de la vivienda.\n\n\nGráfico en movimiento\nGráfico fijo interactivo\n\n\n\n\nCódigo#Cargamos datos\nlibrary(rio)\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\n\n#-\n\nrenta_edad &lt;- read.csv(\"./datos_pulidos/renta_por_edad.csv\")\n\ndff  &lt;- renta_edad %&gt;% rename(tipo = Renta.anual.neta.media.por.persona.y.por.unidad.de.consumo) %&gt;% filter(tipo == \"Renta neta media por persona\", Sexo == \"Ambos sexos\", !(Edad %in% c(\"De 18 a 64 años\", \"Menos de 18 años\", \"Total\")))\n\np &lt;- ggplot(dff, aes(x = Periodo, y = renta, color = Edad)) +\n  geom_line(size = 1) +\n  labs(title = \"Evolución de la renta neta media por edad\", subtitle = \"(Euros corrientes)\",\n       x = \"Año\", y = \"Renta neta\") +\n  theme_ipsum() + \n  theme(legend.position = \"bottom\",\n        panel.grid.major = element_line(colour = \"gray87\", linetype = \"dashed\"),\n        panel.background = element_rect(fill = \"aliceblue\"),\n        panel.grid.minor = element_blank(),\n        axis.text = element_text(family = \"serif\", size = 9, colour = \"gray17\")) + scale_color_manual(values = c(\"green4\", \"black\", \"blue\", \"red\", \"orange\")) +\n  geom_text(aes(label = Edad), nudge_x = 0.5, nudge_y = 0.5, hjust = 0)\n\np_animated &lt;- p + transition_reveal(Periodo) +\n  enter_fade() + \n  exit_fade()\n\nanimate(p_animated, nframes = 200, fps = 20)\n\n\n\n\n\n\n\n\n\n\nCódigolibrary(rio)\nlibrary(tidyverse)\nlibrary(gganimate)\nlibrary(ggthemes)\nlibrary(hrbrthemes)\n\nrenta_edad &lt;- read.csv(\"./datos_pulidos/renta_por_edad.csv\")\n\ndff  &lt;- renta_edad %&gt;% rename(tipo = Renta.anual.neta.media.por.persona.y.por.unidad.de.consumo) %&gt;% filter(tipo == \"Renta neta media por persona\", Sexo == \"Ambos sexos\", !(Edad %in% c(\"De 18 a 64 años\", \"Menos de 18 años\", \"Total\")))\n\np6 &lt;- ggplot(data=dff) +\n  geom_line(aes(x = Periodo, y = renta, color = Edad, group = Edad)) +labs (title = \"Evolución de la renta neta media por edad\", subtitle = \"(En euros corrientes)\", y = \"Renta\", x = \"Año\") + theme_ipsum()\n\nplotly::ggplotly(p6)\n\n\n\n\n\n\n\n\nTenemos este primer gráfico dinámico, que básicamente lo hemos hecho para demostrar que lo podemos hacer. Sabemos que no es especialmente útil, pero sí vistoso, por eso hemos hecho esta presión interactiva pero estática del mismo gráfico\nEn este gráfico, cuyos datos están extraídos del INE podemos observar, como ya anticipábamos, que los jóvenes (16-29 años de edad) son el rango de edad que dispone de menos renta. Más notorio es, claro está, con los menores de 16 años. Los jóvenes de 16 a 29 años contaban con una renta media neta o disponible (después de impuestos) de 11.660€.\n\nLa diferencia con el grupo de 30 a 44 años ha pasado de un 6’38% en 2008 a 10’13% en 2022. Un incremento de un 58’78%.\nCon el grupo de 45 a 64 años del 16’86% mencionado arriba a un 18’03%. Un incremento de un 6’94%.\nLa mayor divergencia se da con el grupo de los mayores de 65 años. De una diferencia del 6’03% en 2008 a una del 21% en 2022. Un espectacular incremento del 248’23%.\n\nPor tanto, la renta de lo jóvenes de entre 16 y 29 años es la que menos ha crecido: tan solo un 12’97% en 14 años.\nComo podemos observar, no sólo es que los jóvenes tengan una renta disponible menor, si no que cada vez se queda más atrás respecto al resto. Los jóvenes, en términos de renta, son cada vez relativamente más tarde.\nÍndice del nivel de Precios de la vivienda a nivel nacional\nAhora vamos a analizar cómo se han comportado los precios de la vivienda en general. Primero lo vamos a hacer observando el comportamiento de los precios de forma general a nivel nacional. Luego veremos cómo se ha comportado en términos de tasas de variación, y más tarde, el nivel de precios por comunidades autónomas y en diferentes momentos del tiempo.\n\nCódigolibrary(readxl)\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(ggExtra)\nlibrary(pxR)\n\nurl &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/25171.px?nocab=1\"\naa &lt;- read.px(url)\nwrite.csv(aa, file = \"./datos_pulidos/data.csv\")\n\ndf &lt;- read.csv(\"./datos_pulidos/data.csv\")\n\ndf1 &lt;- df %&gt;% dplyr::rename(ámbito = Comunidades.y.Ciudades.Autónomas, tipo = General..vivienda.nueva.y.de.segunda.mano, Valor = value) %&gt;% filter (tipo == \"General\", Índices.y.tasas == \"Índice\", ámbito == \"Nacional\")\n\np1 &lt;- ggplot(df1, aes(x = Periodo, y = Valor)) + labs(title = \"Índice nivel de precios de la vivienda a nivel nacional\", subtitle = \"Base 100 = 2015\", y = \"Valor\", x = \"Periodo\",) + geom_point() + geom_line() + theme_light() + rotateTextX()\n\np1\n\n\n\n\n\n\n\nEn este gráfico podemos observar cómo el nivel de precios general en españa tiene una forma de “uve”. Los precios caen de forma abrupta desde 2008 hasta 2013 (donde encontramos los valores más bajos) y luego vuelven a crecer más lentamente. Actualmente (2023T3) nos encontramos en niveles de precios similares a los de la burbuja, lo cual es negativo, pues ya era muy difícil acceder a la vivienda en la burbuja (sin endeudarse masivamente). Ahora, con el poco crecimiento de la renta con estos niveles de precios, también lo es.\nVariación del Indice de Precios de la Vivienda\n\nCódigodf_IPV &lt;- import(\"./datos_pulidos/indice_precio_vivienda.csv\")\n\ndf &lt;- import(\"./datos_pulidos/tenencia_de_vivienda.csv\")\n\ndf_IPV_01 &lt;- df_IPV |&gt;\n  filter(Índices.y.tasas == \"Variación anual\") |&gt; \n  filter(Comunidades.y.Ciudades.Autónomas == \"Nacional\") |&gt; \n  filter(General..vivienda.nueva.y.de.segunda.mano == \"General\")\n\ndf_media_anual &lt;- df_IPV_01 |&gt; \n  mutate(year = substr(Periodo, 1, 4)) |&gt; \n  group_by(year) |&gt; \n  summarise(media_salario = mean(value))\n\nggplot(df_media_anual, aes(x=year, y=media_salario)) +\n  geom_segment( aes(x=year, xend= year, y=0, yend=media_salario), color=\"grey\") +\n  geom_point( color=\"orange\", size=4) +\n  theme_light() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"Índice del Precio de la Vivienda\")\n\n\n\n\n\n\n\nEn este gráfico podemos observar las tasas de variación, de los niveles de precios por año. En este caso los datos son anuales. Sencillamente hemos sacado la media de los 4 trimestres para cada año. Aquí se puede ver claramente en qué años las tasas de variación fueron más negativas tras la explosión de la burbuja. Al contrario de lo que se suele pensar, las tasas más negativas fueron 2011, 2012 y 2013, no 2008. A partir de ahí se encadenan tasas positivas durante 10 años. Eso explica los altos niveles actuales.\nMapa de coropletas: Vivienda por CCAA\nA continuación comprobamos cómo ha evolucionado el precio de la vivienda por toda la geografía Española durante los últimos años. Para ello vamos a analizar los siguientes mapas de coropletas en los que, utilizamos un número índice con base 100 en 2015.\n\nCódigo\n#Cargamos librerías\n\nlibrary(tidyverse)\nlibrary(rio)\nlibrary(mapSpain)\nlibrary(pxR)\nlibrary(dplyr)\nlibrary(ggthemes)\nlibrary(ggExtra) \nlibrary(data.table)\nlibrary(fs)\nlibrary(sf)\nlibrary(patchwork)\nlibrary(plotly)\n\ndevtools::install_github(\"r-lib/conflicted\")\n\n#Empezamos creado el dataframe\n\nurl &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/25171.px?nocab=1\"\naa &lt;- read.px(url)\nwrite.csv(aa, file = \"./datos_pulidos/data.csv\")\ndf &lt;- read.csv(\"./datos_pulidos/data.csv\")\n\n#Empezamos con el manejo de datos/ limpieza\ndf1 &lt;- df %&gt;% dplyr::rename(ámbito = Comunidades.y.Ciudades.Autónomas, tipo = General..vivienda.nueva.y.de.segunda.mano, Valor = value) %&gt;% filter (tipo == \"General\", Índices.y.tasas == \"Índice\", ámbito == \"Nacional\")\n\ndf1.1  &lt;- df %&gt;% rename(Territorio = Comunidades.y.Ciudades.Autónomas, tipo = General..vivienda.nueva.y.de.segunda.mano, Valor = value) \n\ndf1.2 &lt;- df1.1 %&gt;% mutate(Territorio = case_when(\n  Territorio == \"01 Andalucía\" ~ \"Andalucía\",\n  Territorio == \"02 Aragón\" ~ \"Aragón\",\n  Territorio == \"03 Asturias, Principado de\" ~ \"Asturias, Principado de\",\n  Territorio == \"04 Balears, Illes\" ~ \"Balears, Illes\",\n  Territorio == \"05 Canarias\" ~ \"Canarias\",\n  Territorio == \"06 Cantabria\" ~ \"Cantabria\",\n  Territorio == \"07 Castilla y León\" ~ \"Castilla y León\",\n  Territorio == \"08 Castilla - La Mancha\" ~ \"Castilla-La Mancha\",\n  Territorio == \"09 Cataluña\" ~ \"Cataluña\",\n  Territorio == \"10 Comunitat Valenciana\" ~ \"Comunitat Valenciana\",\n  Territorio == \"11 Extremadura\" ~ \"Extremadura\",\n  Territorio == \"12 Galicia\" ~ \"Galicia\",\n  Territorio == \"13 Madrid, Comunidad de\" ~ \"Madrid, Comunidad de\",\n  Territorio == \"14 Murcia, Región de\" ~ \"Murcia, Región de\",\n  Territorio == \"15 Navarra, Comunidad Foral de\" ~ \"Navarra, Comunidad Foral de\",\n  Territorio == \"16 País Vasco\" ~ \"País Vasco\",\n  Territorio == \"17 Rioja, La\" ~ \"Rioja, La\",\n  TRUE ~ Territorio))\n\ndf3 &lt;- df1.2 %&gt;% filter (tipo == \"General\", Índices.y.tasas == \"Índice\", !(Territorio %in% c(\"Nacional\", \"18 Ceuta\", \"19 Melilla\")))\n\nprov &lt;- pjpv.curso.R.2022::LAU2_prov_2020_canarias\n\nccaa &lt;- prov %&gt;% \n  group_by(ine_ccaa, ine_ccaa.n, ine_ccaa.n.pjp) %&gt;% \n  summarise() %&gt;% ungroup()\n\nccaa &lt;- ccaa %&gt;% rename(Territorio = ine_ccaa.n)\n\ndf4 &lt;- df3 %&gt;% filter(Periodo == \"2023T3\")\n\ndf5 &lt;- full_join(ccaa, df4, by = \"Territorio\") %&gt;% filter( !(Territorio %in% c(\"Ceuta\", \"Melilla\")))\n\ndf6 &lt;- df3 %&gt;% \n  filter(Periodo == \"2018T3\")\n\ndf7 &lt;- full_join(ccaa, df6, by = \"Territorio\") %&gt;% filter( !(Territorio %in% c(\"Ceuta\", \"Melilla\")))\n\ndf8 &lt;- df3 %&gt;% filter(Periodo == \"2015T3\")\n\ndf9 &lt;- full_join(ccaa, df8, by = \"Territorio\") %&gt;% filter( !(Territorio %in% c(\"Ceuta\", \"Melilla\")))\n\ndf10 &lt;- df3 %&gt;% filter(Periodo == \"2011T3\")\n\ndf11 &lt;- full_join(ccaa, df10, by = \"Territorio\") %&gt;% filter( !(Territorio %in% c(\"Ceuta\", \"Melilla\")))\n\n#Empezamos a dibujar mapas\n\nescala_limites &lt;- c(100, 170)\n\np4 &lt;- ggplot(df5, aes(fill = Valor)) + \n  geom_sf() +\n  geom_sf_label(aes(label = as.character(Valor)), size = 3, color = \"black\") +\n  scale_fill_viridis_c(guide = \"legend\",limits = escala_limites) +\n  labs(title = \"Nivel de precios de la vivienda 2023\") + \n  theme_void()\n\np5 &lt;- ggplot(df7, aes(fill = Valor)) + \n  geom_sf() +\n  geom_sf_label(aes(label = as.character(Valor)), size = 3, color = \"black\") +\n  scale_fill_viridis_c(guide = \"legend\", limits = escala_limites) +\n  labs(title = \"Nivel de precios de la vivienda 2018\") + \n  theme_void()\n\np6 &lt;- ggplot(df9, aes(fill = Valor)) + \n  geom_sf() +\n  geom_sf_label(aes(label = as.character(Valor)), size = 3, color = \"white\") +\n  scale_fill_viridis_c(guide = \"legend\",limits = escala_limites) +\n  labs(title = \"Nivel de precios de la vivienda 2015\") + \n  theme_void()\n\np7 &lt;- ggplot(df11, aes(fill = Valor)) + \n  geom_sf() +\n  geom_sf_label(aes(label = as.character(Valor)), size = 3, color = \"black\") +\n  scale_fill_viridis_c(guide = \"legend\",limits = escala_limites) +\n  labs(title = \"Nivel de precios de la vivienda 2011\") + \n  theme_void()\n\n#Combinar todos los gráficos\n\np9 &lt;-p7 + p6 +p5 +p4\n\np9\n\n\n\n\n\n\n\nEstos mapas de coropletas reflejan los niveles de precios de la vivienda en 6 momentos diferentes del tiempo. El primero es del tercer trimestre del año 2007. En ese momento los precios, como podemos observar, son los más altos. Este es el punto más elevado de la burbuja. Los años siguientes reflejan el pinchazo de la burbuja, con un descenso continuado de los precios hasta 2013. Que es el punto más bajo. Hemos decidido poner el año 2015 por ser el año de la base 100. A partir de ahí, vemos cómo en los años posteriores los precios son ya más elevados que en 2015, y particularmente en 2023, ligeramente por debajo, pero sin haber una burbuja. O, al menos, no parece haberla.\nAl ser mapas de coropletas podemos sacar conclusiones acerca de en qué comunidades han aumentado más los precios y por tanto, dónde es más difícil acceder a la vivienda, ceteris paribus. En el último gráfico destacan claramente la Comunidad de Madrid, Cataluña y Baleares. Esto no nos sorprende, tanto la Comunidad de Madrid, como Cataluña son regiones muy dinámicas donde, además, se encuentran las principales ciudades de España. Baleares, por su parte, es una de las regiones más turísticas, donde la oferta de inmuebles tampoco es demasiado elevada. Destacan también en segunda fila País Vasco (región muy dinámica), Andalucía y Canarias (regiones muy turísticas).\nTal vez os habéis fijado en que estos mapas no concuerdan exactamente con lo que hemos visto hace dos gráficos (se veía que el nivel general de precios de la vivienda es ahora igual al del punto más alto de la burbuja y, sin embargo, en los mapas parece que en 2007T3 los precios son mucho más elevados que en la actualidad).\nEsto se debe a que hay más viviendas allá donde más está subiendo el precio como se observa en el gráfico (que hay que insertar). La explicación de la afirmación anterior que parece a priori contradictoria, es que aunque hay más vivienda en esta zona (oferta elevada), la demanda es todavía más elevada que la oferta.\nEste continuo encarecimiento de las viviendas se traduce en que los jóvenes cambian su régimen de tenencia de vivienda:P$OE\nRégimen de viviendas de 16 a 29 años\n\nCódigo#Hogares por regimen de tenencia edad\n#Cargamos liberías\nlibrary(ggplot2)\nlibrary(hrbrthemes)\nlibrary(tidyverse)\nlibrary(pxR)\n\nurl4 &lt;- \"https://www.ine.es/jaxiT3/files/t/es/px/9994.px?nocab=1\"\nac &lt;- read.px(url4)\nwrite.csv(ac, file = \"./datos_pulidos/data_1.csv\", sep = \",\")\nvivienda_edad &lt;- read.csv(\"./datos_pulidos/data_1.csv\")\n\ndd &lt;- vivienda_edad %&gt;%\n  dplyr::rename(regimen = Régimen.de.tenencia.de.la.vivienda.principal, edad = Edad.de.la.persona.de.referencia, sexo = Sexo.de.la.persona.de.referencia) %&gt;%\n  filter(edad == \"De 16 a 29 años\", sexo == \"Ambos sexos\")\n\np30 &lt;- dd %&gt;%\n  ggplot(aes(x = Periodo, y = value, fill = regimen)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  theme_ipsum() +\n  labs(x = \"Año\", y = \"% según régimen de tenencia\", \n       title = \"Régimen de vivienda de 16 a 29 años\",\n       subtitle = \"Datos porcentuales\",\n       caption = \"Elaboración propia a partir de datos del INE\") +\n  scale_fill_manual(values = c(\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\"), \n                    labels = c(\"Alquiler a precios de mercado\", \"Alquiler inferior al precio de mercado\", \"Cesión\", \"Propiedad\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1), \n        plot.caption = element_text(hjust = 0.5),\n        plot.title = element_text(hjust = 0.5, color = \"black\", size = 18, face = \"bold\"),\n        plot.subtitle = element_text(hjust = 0.5, size = 14))\n\np30\n\n\n\n\n\n\n\nEn este gráfico podemos observar cómo el régimen de vivienda entre los jóvenes ha ido variando a lo largo del tiempo. La mayor sustitución ha sido de régimen de propiedad al de alquiler a precios de mercado. También ha aumentado ligeramente el régimen de cesión, es decir; los jóvenes se han trasladado a opciones más asequibles. Aunque los alquileres también suben en las grandes ciudades, siguen siendo opciones más asumibles que pagar la entrada de la hipoteca y su mensualidad, por no hablar de fórmulas utilizadas como el compartir piso.\nOtros gráficos bonitos pero poco útiles sobre el salario\n\n\nRigeline por grupo de edad\nRigeline por formación\nBarras agrupadas por edad\nBarras agrupadas por formación\n\n\n\n\nCódigolibrary(tidyverse)\nlibrary(rio)\nlibrary(ggplot2)\nlibrary(ggridges)\n\ndf_edad &lt;- import(\"./datos_pulidos/salario_grupo_edad.csv\")\n\np1&lt;- ggplot(df_edad, aes(x = salario, y = grupo_edad, fill = grupo_edad)) +\n  geom_density_ridges() +\n  theme_ridges() + \n  theme(legend.position = \"none\")\n\np1\n\n\n\n\n\n\n\n\n\n\nCódigolibrary(tidyverse)\nlibrary(rio)\nlibrary(ggplot2)\nlibrary(ggridges)\n\ndf_formacion &lt;- import(\"./datos_pulidos/salario_formacion.csv\")\n\np4&lt;- ggplot(df_formacion, aes(x = salario, y = formacion, fill = formacion)) +\n  geom_density_ridges() +\n  theme_ridges() + \n  theme(legend.position = \"none\")\n\np4\n\n\n\n\n\n\n\n\n\n\nCódigolibrary(tidyverse)\nlibrary(rio)\nlibrary(ggplot2)\nlibrary(ggridges)\n\ndf_edad &lt;- import(\"./datos_pulidos/salario_grupo_edad.csv\")\n\ndf_edad_01 &lt;- df_edad |&gt; \n  filter(grupo_edad != \"Total\") |&gt; \n  filter()\n\ndf_edad_01$year &lt;- factor(df_edad_01$year)\n\np2 &lt;- ggplot(df_edad_01, aes(fill = grupo_edad, y = salario, x = year))+\n  geom_bar(position = \"dodge\", stat = \"identity\")+\n  labs(title = \"Salario por grupo de edad\")\n\np2\n\n\n\n\n\n\n\n\n\n\nCódigolibrary(tidyverse)\nlibrary(rio)\nlibrary(ggplot2)\nlibrary(ggridges)\n\ndf_formacion &lt;- import(\"./datos_pulidos/salario_formacion.csv\")\n\ndf_form_01 &lt;- df_formacion |&gt; \n  filter(formacion != \"Total\")\n\ndf_form_01$year &lt;- factor(df_form_01$year)\n\np5 &lt;- ggplot(df_form_01, aes(fill = formacion, y = salario, x = year))+\n  geom_bar(position = \"dodge\", stat = \"identity\")+\n  labs(title = \"Salario por formación\")\n\np5\n\n\n\n\n\n\n\n\n\n\nMas información sobre el tema\nun video de blablabla"
  },
  {
    "objectID": "my_trabajo_BigData.html#evolución-de-la-renta-neta-por-edad",
    "href": "my_trabajo_BigData.html#evolución-de-la-renta-neta-por-edad",
    "title": "VIVIENDA EN ESPAÑA",
    "section": "",
    "text": "Iniciaremos analizando los datos de renta según la edad (como pueden imaginar, los jóvenes constituyen el grupo poblacional que dispone de menos renta), para, a continuación, adentrarnos en datos que muestran la evolución de los precios de la vivienda.\n\n\nCódigo\ndf_edad &lt;- import(\"./datos_pulidos/salario_grupo_edad.csv\")\ndf_edad_01 &lt;- df_edad |&gt; \n  filter(grupo_edad != \"Total\")\n\ndf_edad_01$year &lt;- factor(df_edad_01$year)\n\np2 &lt;- ggplot(df_edad_01, aes(fill = grupo_edad, y = salario, x = year))+\n  geom_bar(position = \"dodge\", stat = \"identity\")+\n  labs(title = \"Salario por grupo de edad\")\n\np2\n\n\n\n\n\n\n\n\n\n##INDICE DE PRECIOS POR VIVIENDA POR AÑOS\n\n\nCódigo\ndf_IPV &lt;- import(\"./datos_pulidos/indice_precio_vivienda.csv\")\n\ndf &lt;- import(\"./datos_pulidos/tenencia_de_vivienda.csv\")\n\ndf_IPV_01 &lt;- df_IPV |&gt;\n  filter(Índices.y.tasas == \"Variación anual\") |&gt; \n  filter(Comunidades.y.Ciudades.Autónomas == \"Nacional\") |&gt; \n  filter(General..vivienda.nueva.y.de.segunda.mano == \"General\")\n\ndf_media_anual &lt;- df_IPV_01 |&gt; \n  mutate(year = substr(Periodo, 1, 4)) |&gt; \n  group_by(year) |&gt; \n  summarise(media_salario = mean(value))\n\nggplot(df_media_anual, aes(x=year, y=media_salario)) +\n  geom_segment( aes(x=year, xend= year, y=0, yend=media_salario), color=\"grey\") +\n  geom_point( color=\"orange\", size=4) +\n  theme_light() +\n  theme(\n    panel.grid.major.x = element_blank(),\n    panel.border = element_blank(),\n    axis.ticks.x = element_blank()\n  ) +\n  xlab(\"\") +\n  ylab(\"Índice del Precio de la Vivienda\")\n\n\n\n\n\n\n\n\n\n\n\n\nUn pingüino chulo\n\n\n\nSí, lo pingüinos molan, así que vamos a poner otra foto de pingüinos que tenemos en nuestro PC pero la vamos a poner en el margen:"
  },
  {
    "objectID": "my_trabajo_BigData.html#algunos-gráficos",
    "href": "my_trabajo_BigData.html#algunos-gráficos",
    "title": "VIVIENDA EN ESPAÑA",
    "section": "Algunos gráficos",
    "text": "Algunos gráficos\nBueno pues vamos a hacer algún gráfico, pero claro antes he de cargar los paquetes\n\nCódigolibrary(tidyverse)\n\n\nArreglo los datos\n\nCódigo#- cojos datos de pingüinos y arreglo un poco \ndf &lt;- palmerpenguins::penguins %&gt;% \n  dplyr::select(species, bill_depth_mm, body_mass_g) %&gt;% \n  tidyr::drop_na()\n\n\n\nPrimer gráfico\n\nCódigo#- primer gráfico\np &lt;- ggplot(data = df, \n       mapping = aes(x = bill_depth_mm, y = body_mass_g, color = species)) +\n     geom_point()\np\n\n\n\n\n\n\n\nSegundo\n\nCódigo#- segundo gráfico\np &lt;- p + geom_smooth(method = \"lm\", se = FALSE) \n\np\n\n\n\n\n\n\n\nEl último\n\nCódigo#- tercer gráfico\np + geom_smooth(method = \"lm\", se = FALSE, color = \"black\") \n\n\n\n\n\n\n\n\nCon esto acabo mi trabajo para BigData!!\n\n\n\nInformación sobre la sesión\nAbajo muestro mi entorno de trabajo y paquetes utilizados\n\n\n current session info \n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.3.1 (2023-06-16 ucrt)\n os       Windows 11 x64 (build 22631)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  Spanish_Spain.utf8\n ctype    Spanish_Spain.utf8\n tz       Europe/Madrid\n date     2023-12-19\n pandoc   3.1.1 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package           * version    date (UTC) lib source\n assertthat          0.2.1      2019-03-21 [1] CRAN (R 4.3.1)\n backports           1.4.1      2021-12-13 [1] CRAN (R 4.3.0)\n bibtex              0.5.1      2023-01-26 [1] CRAN (R 4.3.1)\n bit                 4.0.5      2022-11-15 [1] CRAN (R 4.3.1)\n bit64               4.0.5      2020-08-30 [1] CRAN (R 4.3.1)\n broom               1.0.5      2023-06-09 [1] CRAN (R 4.3.1)\n cellranger          1.1.0      2016-07-27 [1] CRAN (R 4.3.1)\n class               7.3-22     2023-05-03 [2] CRAN (R 4.3.1)\n classInt            0.4-10     2023-09-05 [1] CRAN (R 4.3.1)\n cli                 3.6.1      2023-03-23 [1] CRAN (R 4.3.1)\n clipr               0.8.0      2022-02-22 [1] CRAN (R 4.3.1)\n colorspace          2.1-0      2023-01-23 [1] CRAN (R 4.3.1)\n countrycode         1.5.0      2023-05-30 [1] CRAN (R 4.3.1)\n crayon              1.5.2      2022-09-29 [1] CRAN (R 4.3.1)\n crosstalk           1.2.0      2021-11-04 [1] CRAN (R 4.3.1)\n crul                1.4.0      2023-05-17 [1] CRAN (R 4.3.2)\n curl              * 5.2.0      2023-12-08 [1] CRAN (R 4.3.2)\n data.table        * 1.14.8     2023-02-17 [1] CRAN (R 4.3.1)\n desc                1.4.2      2022-09-08 [1] CRAN (R 4.3.1)\n details             0.3.0      2022-03-27 [1] CRAN (R 4.3.2)\n digest              0.6.33     2023-07-07 [1] CRAN (R 4.3.1)\n downloader        * 0.4        2015-07-09 [1] CRAN (R 4.3.2)\n dplyr             * 1.1.4      2023-11-17 [1] CRAN (R 4.3.2)\n DT                * 0.31       2023-12-09 [1] CRAN (R 4.3.2)\n e1071               1.7-13     2023-02-01 [1] CRAN (R 4.3.1)\n ellipsis            0.3.2      2021-04-29 [1] CRAN (R 4.3.1)\n eurostat          * 3.8.2      2023-03-06 [1] CRAN (R 4.3.2)\n evaluate            0.21       2023-05-05 [1] CRAN (R 4.3.1)\n extrafont           0.19       2023-01-18 [1] CRAN (R 4.3.1)\n extrafontdb         1.0        2012-06-11 [1] CRAN (R 4.3.1)\n fansi               1.0.6      2023-12-08 [1] CRAN (R 4.3.2)\n farver              2.1.1      2022-07-06 [1] CRAN (R 4.3.1)\n fastmap             1.1.1      2023-02-24 [1] CRAN (R 4.3.1)\n fontBitstreamVera   0.1.1      2017-02-01 [1] CRAN (R 4.3.1)\n fontLiberation      0.1.0      2016-10-15 [1] CRAN (R 4.3.1)\n fontquiver          0.2.1      2017-02-01 [1] CRAN (R 4.3.2)\n forcats           * 1.0.0      2023-01-29 [1] CRAN (R 4.3.1)\n fs                * 1.6.3      2023-07-20 [1] CRAN (R 4.3.1)\n gdtools             0.3.5      2023-12-09 [1] CRAN (R 4.3.2)\n generics            0.1.3      2022-07-05 [1] CRAN (R 4.3.1)\n gfonts              0.2.0      2023-01-08 [1] CRAN (R 4.3.2)\n gganimate         * 1.0.8      2022-09-08 [1] CRAN (R 4.3.1)\n ggplot2           * 3.4.4      2023-10-12 [1] CRAN (R 4.3.2)\n ggthemes          * 4.2.4      2021-01-20 [1] CRAN (R 4.3.1)\n glue                1.6.2      2022-02-24 [1] CRAN (R 4.3.1)\n gtable              0.3.4      2023-08-21 [1] CRAN (R 4.3.1)\n here                1.0.1      2020-12-13 [1] CRAN (R 4.3.1)\n hms                 1.1.3      2023-03-21 [1] CRAN (R 4.3.1)\n hrbrthemes        * 0.8.0      2020-03-06 [1] CRAN (R 4.3.2)\n htmltools           0.5.6      2023-08-10 [1] CRAN (R 4.3.1)\n htmlwidgets         1.6.2      2023-03-17 [1] CRAN (R 4.3.1)\n httpcode            0.3.0      2020-04-10 [1] CRAN (R 4.3.2)\n httpuv              1.6.11     2023-05-11 [1] CRAN (R 4.3.1)\n httr                1.4.7      2023-08-15 [1] CRAN (R 4.3.1)\n ISOweek             0.6-2      2011-09-07 [1] CRAN (R 4.3.1)\n jsonlite            1.8.7      2023-06-29 [1] CRAN (R 4.3.1)\n KernSmooth          2.23-21    2023-05-03 [2] CRAN (R 4.3.1)\n knitr               1.45       2023-10-30 [1] CRAN (R 4.3.2)\n labeling            0.4.3      2023-08-29 [1] CRAN (R 4.3.1)\n later               1.3.1      2023-05-02 [1] CRAN (R 4.3.1)\n lattice             0.21-8     2023-04-05 [2] CRAN (R 4.3.1)\n lazyeval            0.2.2      2019-03-15 [1] CRAN (R 4.3.1)\n lifecycle           1.0.4      2023-11-07 [1] CRAN (R 4.3.2)\n lubridate         * 1.9.2      2023-02-10 [1] CRAN (R 4.3.1)\n magick              2.8.1      2023-10-22 [1] CRAN (R 4.3.1)\n magrittr            2.0.3      2022-03-30 [1] CRAN (R 4.3.1)\n Matrix              1.6-1.1    2023-09-18 [1] CRAN (R 4.3.1)\n mgcv                1.8-42     2023-03-02 [2] CRAN (R 4.3.1)\n mime                0.12       2021-09-28 [1] CRAN (R 4.3.0)\n munsell             0.5.0      2018-06-12 [1] CRAN (R 4.3.1)\n nlme                3.1-162    2023-01-31 [2] CRAN (R 4.3.1)\n palmerpenguins      0.1.1      2022-08-15 [1] CRAN (R 4.3.1)\n pillar              1.9.0      2023-03-22 [1] CRAN (R 4.3.1)\n pjpv.curso.R.2022   0.0.0.9000 2023-12-18 [1] Github (perezp44/pjpv.curso.R.2022@bd4dd73)\n pkgconfig           2.0.3      2019-09-22 [1] CRAN (R 4.3.1)\n plotly              4.10.2     2023-06-03 [1] CRAN (R 4.3.1)\n plyr              * 1.8.8      2022-11-11 [1] CRAN (R 4.3.1)\n png                 0.1-8      2022-11-29 [1] CRAN (R 4.3.0)\n prettyunits         1.1.1      2020-01-24 [1] CRAN (R 4.3.1)\n progress            1.2.2      2019-05-16 [1] CRAN (R 4.3.1)\n promises            1.2.1      2023-08-10 [1] CRAN (R 4.3.1)\n proxy               0.4-27     2022-06-09 [1] CRAN (R 4.3.1)\n purrr             * 1.0.2      2023-08-10 [1] CRAN (R 4.3.1)\n pxR               * 0.42.7     2022-11-23 [1] CRAN (R 4.3.2)\n R.methodsS3         1.8.2      2022-06-13 [1] CRAN (R 4.3.0)\n R.oo                1.25.0     2022-06-12 [1] CRAN (R 4.3.0)\n R.utils             2.12.2     2022-11-11 [1] CRAN (R 4.3.1)\n R6                  2.5.1      2021-08-19 [1] CRAN (R 4.3.1)\n Rcpp                1.0.11     2023-07-06 [1] CRAN (R 4.3.1)\n readr             * 2.1.4      2023-02-10 [1] CRAN (R 4.3.1)\n readxl            * 1.4.3      2023-07-06 [1] CRAN (R 4.3.2)\n RefManageR          1.4.0      2022-09-30 [1] CRAN (R 4.3.1)\n regions             0.1.8      2021-06-21 [1] CRAN (R 4.3.1)\n reshape2          * 1.4.4      2020-04-09 [1] CRAN (R 4.3.1)\n rio               * 1.0.1      2023-09-19 [1] CRAN (R 4.3.1)\n RJSONIO           * 1.3-1.9    2023-11-27 [1] CRAN (R 4.3.2)\n rlang               1.1.2      2023-11-04 [1] CRAN (R 4.3.2)\n rlist             * 0.4.6.2    2021-09-03 [1] CRAN (R 4.3.2)\n rmarkdown           2.24       2023-08-14 [1] CRAN (R 4.3.1)\n rprojroot           2.0.3      2022-04-02 [1] CRAN (R 4.3.1)\n rstudioapi          0.15.0     2023-07-07 [1] CRAN (R 4.3.1)\n Rttf2pt1            1.3.12     2023-01-22 [1] CRAN (R 4.3.1)\n scales              1.3.0      2023-11-28 [1] CRAN (R 4.3.2)\n sessioninfo         1.2.2      2021-12-06 [1] CRAN (R 4.3.2)\n shiny               1.7.5      2023-08-12 [1] CRAN (R 4.3.1)\n stringi             1.8.3      2023-12-11 [1] CRAN (R 4.3.2)\n stringr           * 1.5.1      2023-11-14 [1] CRAN (R 4.3.2)\n systemfonts         1.0.4      2022-02-11 [1] CRAN (R 4.3.1)\n tibble            * 3.2.1      2023-03-20 [1] CRAN (R 4.3.1)\n tidyr             * 1.3.0      2023-01-24 [1] CRAN (R 4.3.1)\n tidyselect          1.2.0      2022-10-10 [1] CRAN (R 4.3.1)\n tidyverse         * 2.0.0      2023-02-22 [1] CRAN (R 4.3.2)\n timechange          0.2.0      2023-01-11 [1] CRAN (R 4.3.1)\n tweenr              2.0.2      2022-09-06 [1] CRAN (R 4.3.1)\n tzdb                0.4.0      2023-05-12 [1] CRAN (R 4.3.1)\n utf8                1.2.4      2023-10-22 [1] CRAN (R 4.3.2)\n vctrs               0.6.5      2023-12-01 [1] CRAN (R 4.3.2)\n viridisLite         0.4.2      2023-05-02 [1] CRAN (R 4.3.1)\n vroom               1.6.3      2023-04-28 [1] CRAN (R 4.3.1)\n withr               2.5.2      2023-10-30 [1] CRAN (R 4.3.2)\n writexl           * 1.4.2      2023-01-06 [1] CRAN (R 4.3.1)\n xfun                0.40       2023-08-09 [1] CRAN (R 4.3.1)\n xml2                1.3.5      2023-07-06 [1] CRAN (R 4.3.1)\n xtable              1.8-4      2019-04-21 [1] CRAN (R 4.3.1)\n yaml                2.3.7      2023-01-23 [1] CRAN (R 4.3.0)\n zoo               * 1.8-12     2023-04-13 [1] CRAN (R 4.3.1)\n\n [1] C:/Users/Joel Seguí Far/AppData/Local/R/win-library/4.3\n [2] C:/Program Files/R/R-4.3.1/library\n\n──────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Presentación del trabajo",
    "section": "",
    "text": "Hola, somos Saúl Gil, Pedro Peñalver y Joel Seguí\nEste blog es para presentar la para la asignatura “Programación y manejo de datos en la era Del Big Data”, optativa de GECO en la Facultad de Economía de la Universitat de València.\nEl objetivo es hacer un análisis sobre la disponibilidad y la accesibilidad de los jóvenes a la vivienda en España, a lo largo de los años, y relacionarlo con la entrada en el mundo laboral.\nLa web de la asignatura está aquí y los trabajos de mis compañeros de curso puedes verlos aquí.\nEl trabajo puede verse aquí, y las slides aquí."
  }
]